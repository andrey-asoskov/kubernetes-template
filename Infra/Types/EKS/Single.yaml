---
apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: test-eks
  region: us-east-1
  version: "1.24"
  tags:
    # Add more cloud tags if needed for billing
    environment: staging

vpc:
  id: "vpc-0c1314451b41dca89"
  subnets:
    # private:
    #   us-east-1q: { id: subnet-08fe56b591c431438 }
    #   us-east-1b: { id: subnet-05652b6154e941c9e }
    #   us-east-1c: { id: subnet-030da8121df990776 }
    public:
      us-east-1q: {id: subnet-079b9ec92a367fb73}
      us-east-1b: {id: subnet-07ff8b015701f549f}
      us-east-1c: {id: subnet-0a1d1c9bbbaaff5e1}
  clusterEndpoints:
    publicAccess: true
    privateAccess: true
  publicAccessCIDRs: 
    - "0.0.0.0/0"
    - "2.2.2.0/24"

iam:
  withOIDC: true
  serviceAccounts:
    - metadata:
        name: s3-reader
        # if no namespace is set, "default" will be used;
        # the namespace will be created if it doesn't exist already
        namespace: backend-apps
        labels: {aws-usage: "application"}
      attachPolicyARNs:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
    - metadata:
        name: aws-load-balancer-controller
        namespace: kube-system
      wellKnownPolicies:
        awsLoadBalancerController: true
    - metadata:
        name: ebs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        ebsCSIController: true
    - metadata:
        name: efs-csi-controller-sa
        namespace: kube-system
      wellKnownPolicies:
        efsCSIController: true
    - metadata:
        name: external-dns
        namespace: kube-system
      wellKnownPolicies:
        externalDNS: true
    - metadata:
        name: cert-manager
        namespace: cert-manager
      wellKnownPolicies:
        certManager: true
    - metadata:
        name: cluster-autoscaler
        namespace: kube-system
        labels: {aws-usage: "cluster-ops"}
      wellKnownPolicies:
        autoScaler: true
    - metadata:
        name: autoscaler-service
        namespace: kube-system
      attachPolicy:  # inline policy can be defined along with `attachPolicyARNs`
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "autoscaling:DescribeAutoScalingGroups"
              - "autoscaling:DescribeAutoScalingInstances"
              - "autoscaling:DescribeLaunchConfigurations"
              - "autoscaling:DescribeTags"
              - "autoscaling:SetDesiredCapacity"
              - "autoscaling:TerminateInstanceInAutoScalingGroup"
              - "ec2:DescribeLaunchTemplateVersions"
            Resource: '*'

managedNodeGroups:
  - name: ng-1
    labels:
      role: workers
      my-cool-label: pizza
    # taints:
    #   feaster: "true:NoSchedule"
    tags:
      k8s.io/cluster-autoscaler/node-template/label/my-cool-label: pizza
      # k8s.io/cluster-autoscaler/node-template/taint/feaster: "true:NoSchedule"
      # EC2 tags required for cluster-autoscaler auto-discovery
      k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
      k8s.io/cluster-autoscaler/node-template/label/aws.amazon.com/spot: "false"
      k8s.io/cluster-autoscaler/node-template/label/gpu-count: "0"
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/test-eks: "owned"
      kubernetes.io/cluster/test-eks: "owned"
    instanceType: t3.large
    amiFamily: AmazonLinux2
    # containerRuntime: containerd
    desiredCapacity: 1
    minSize: 1
    maxSize: 3
    volumeSize: 10
    volumeType: gp2
    disableIMDSv1: true
    privateNetworking: false
    ssh:
      publicKeyPath: ~/.ssh/aasoskov.pub
    iam:
      withAddonPolicies:
        ebs: true
        efs: true
        autoScaler: true
        # externalDNS: true
        # certManager: true
        albIngress: false
    propagateASGTags: true
    subnets:
      - us-east-1q
      - us-east-1b
      - us-east-1c

addons:
# - name: vpc-cni # no version is specified so it deploys the default version
#   attachPolicyARNs:
#     - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
  - name: coredns
    version: latest # auto discovers the latest available
  - name: kube-proxy
    version: latest
